// This source code file is AUTO-GENERATED by github.com/taskcluster/jsonschema2go

package winnative

import (
	"encoding/json"
	"github.com/taskcluster/taskcluster-client-go/tcclient"
	"github.com/taskcluster/taskcluster-worker/runtime"
)

type (
	// This schema defines the structure of the `payload` property referred to in a Task Cluster Task definition.
	payload struct {

		// Artifacts to be published. For example: `{ "type": "file", "path": "builds\\firefox.exe", "expires": "2015-08-19T17:30:00.000Z" }`
		Artifacts []struct {

			// Date when artifact should expire must be in the future
			Expires tcclient.Time `json:"expires"`

			// Filesystem path of artifact
			Path string `json:"path"`

			// Artifacts can be either an individual `file` or a `directory` containing potentially multiple files with recursively included subdirectories
			//
			// Possible values:
			//   * "file"
			//   * "directory"
			Type string `json:"type"`
		} `json:"artifacts"`

		// One array per command (each command is an array of arguments). Several arrays for several commands.
		Command [][]string `json:"command"`

		// Example: ```{ "PATH": "C:\\Windows\\system32;C:\\Windows", "GOOS": "darwin" }```
		Env json.RawMessage `json:"env"`

		// Maximum time the task container can run in seconds
		//
		// Mininum:    1
		// Maximum:    86400
		MaxRunTime int `json:"maxRunTime"`
	}
)

var payloadSchema = func() runtime.CompositeSchema {
	schema, err := runtime.NewCompositeSchema(
		"payload",
		`
		{
		  "$schema": "http://json-schema.org/draft-04/schema#",
		  "description": "This schema defines the structure of the `+"`"+`payload`+"`"+` property referred to in a Task Cluster Task definition.",
		  "id": "http://schemas.taskcluster.net/generic-worker/v1/payload.json#",
		  "properties": {
		    "artifacts": {
		      "description": "Artifacts to be published. For example: `+"`"+`{ \"type\": \"file\", \"path\": \"builds\\\\firefox.exe\", \"expires\": \"2015-08-19T17:30:00.000Z\" }`+"`"+`",
		      "items": {
		        "properties": {
		          "expires": {
		            "description": "Date when artifact should expire must be in the future",
		            "format": "date-time",
		            "title": "Expiry date and time",
		            "type": "string"
		          },
		          "path": {
		            "description": "Filesystem path of artifact",
		            "title": "Artifact location",
		            "type": "string"
		          },
		          "type": {
		            "description": "Artifacts can be either an individual `+"`"+`file`+"`"+` or a `+"`"+`directory`+"`"+` containing potentially multiple files with recursively included subdirectories",
		            "enum": [
		              "file",
		              "directory"
		            ],
		            "title": "Artifact upload type.",
		            "type": "string"
		          }
		        },
		        "required": [
		          "type",
		          "path",
		          "expires"
		        ],
		        "type": "object"
		      },
		      "title": "Artifacts to be published",
		      "type": "array"
		    },
		    "command": {
		      "description": "One array per command (each command is an array of arguments). Several arrays for several commands.",
		      "items": {
		        "items": {
		          "type": "string"
		        },
		        "minItems": 1,
		        "type": "array"
		      },
		      "minItems": 1,
		      "title": "Commands to run",
		      "type": "array"
		    },
		    "env": {
		      "description": "Example: `+"`"+``+"`"+``+"`"+`{ \"PATH\": \"C:\\\\Windows\\\\system32;C:\\\\Windows\", \"GOOS\": \"darwin\" }`+"`"+``+"`"+``+"`"+`",
		      "title": "Environment variable mappings.",
		      "type": "object"
		    },
		    "maxRunTime": {
		      "description": "Maximum time the task container can run in seconds",
		      "maximum": 86400,
		      "minimum": 1,
		      "multipleOf": 1,
		      "title": "Maximum run time in seconds",
		      "type": "integer"
		    }
		  },
		  "required": [
		    "command",
		    "maxRunTime"
		  ],
		  "title": "Payload",
		  "type": "object"
		}
		`,
		true,
		func() interface{} {
			return &payload{}
		},
	)
	if err != nil {
		panic(err)
	}
	return schema
}()
